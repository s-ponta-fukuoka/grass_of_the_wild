//=============================================================================
//
// [canvas_manager.h]
// Author : shota fukuoka
//
//=============================================================================
#include "canvas_manager.h"
#include "canvas.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

///////////////////////////////////////////////////////////////////////////////
//コンストラクタ
///////////////////////////////////////////////////////////////////////////////
CanvasManager::CanvasManager()
{
	;
}

///////////////////////////////////////////////////////////////////////////////
//デストラクタ
///////////////////////////////////////////////////////////////////////////////
CanvasManager::~CanvasManager()
{
	;
}

///////////////////////////////////////////////////////////////////////////////
//追加
///////////////////////////////////////////////////////////////////////////////
void CanvasManager::AddCanvas(Canvas* canvas)
{
	if (canvas == NULL) { return; }
	m_list.push_back(canvas);
}

///////////////////////////////////////////////////////////////////////////////
//削除
///////////////////////////////////////////////////////////////////////////////
void CanvasManager::DeleteCanvas(const Canvas* canvas)
{
	for (auto ite = m_list.begin(); ite != m_list.end(); ++ite)
	{
		if ((*ite) != canvas) { continue; }
		m_list.erase(ite);
		return;
	}
}

///////////////////////////////////////////////////////////////////////////////
//全更新
///////////////////////////////////////////////////////////////////////////////
void CanvasManager::UpdateAll(void)
{
	for (auto ite = m_list.begin(); ite != m_list.end(); ++ite)
	{
		if ((*ite) == NULL) { continue; }
		(*ite)->Update();
	}
}

///////////////////////////////////////////////////////////////////////////////
//全削除
///////////////////////////////////////////////////////////////////////////////
void CanvasManager::ReleaseAll(void)
{
	for (auto ite = m_list.begin(); ite != m_list.end(); ++ite)
	{
		if ((*ite) == NULL) { continue; }
		(*ite)->Release();
	}
}

